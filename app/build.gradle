apply plugin: 'com.android.application'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.2'
    defaultConfig {
        applicationId "com.example.fine.ndksample"
        minSdkVersion 16
        // solved libsystem_api.so: has text relocations
        targetSdkVersion 22
        versionCode 1
        versionName '1.0.0'

        externalNativeBuild {
            ndkBuild {

                // Specifies which native libraries to build and package for this
                // product flavor. If you don't configure this property, Gradle
                // builds and packages all shared object libraries that you define
                // in your CMake or ndk-build project.

                abiFilters "armeabi-v7a", "armeabi"
            }
        }

        // if you want to control what Gradle should build, independently of what you want it to package into your APK,
        // configure another abiFilters flag in the defaultConfig.externalNativeBuild.cmake {} block
        // (or defaultConfig.externalNativeBuild.ndkBuild {} block). Gradle builds those ABI configurations but only
        // packages the ones you specify in the defaultConfig.ndk{} block.

        /*ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters "armeabi-v7a", "armeabi"
        }*/
    }
    signingConfigs {
        release {
            keyAlias 'fine'
            keyPassword 'yexiaokang'
            storeFile file('keystore.jks')
            storePassword 'yexiaokang'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    /*sourceSets {
        main {
            jniLibs.srcDirs 'src/main/libs'
            jni.srcDirs = []                    // disable automatic ndk-build call
        }
    }

    // call regular ndk-build(.cmd) script
    // import org.apache.tools.ant.taskdefs.condition.Os
    task ndkBuild(type: Exec) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def command = properties.getProperty('ndk.dir', null) + "/ndk-build.cmd"
            commandLine command, '-C', file('src/main/jni').absolutePath
        } else {
            def command = properties.getProperty('ndk.dir', null) + "/ndk-build"
            commandLine command, '-C', file('src/main/jni').absolutePath
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }*/

    // You use this block to link Gradle to your CMake or ndk-build script.
    externalNativeBuild {
        ndkBuild {
            // If you want to link Gradle to an existing ndk-build project,
            // use the ndkBuild {} block instead of cmake {}, and provide a relative path to your Android.mk file.
            // Gradle also includes the Application.mk file if it is located in the same directory as your Android.mk file.
            path "src/main/jni/Android.mk"
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.yxkang.android:support:1.0.5'
    compile 'com.android.support:appcompat-v7:24.2.1'
}
